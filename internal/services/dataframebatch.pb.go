// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.6.1
// source: dataframebatch.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Datapoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datapointid string  `protobuf:"bytes,1,opt,name=datapointid,proto3" json:"datapointid,omitempty"`
	Value       float32 `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Datapoint) Reset() {
	*x = Datapoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataframebatch_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Datapoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Datapoint) ProtoMessage() {}

func (x *Datapoint) ProtoReflect() protoreflect.Message {
	mi := &file_dataframebatch_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Datapoint.ProtoReflect.Descriptor instead.
func (*Datapoint) Descriptor() ([]byte, []int) {
	return file_dataframebatch_proto_rawDescGZIP(), []int{0}
}

func (x *Datapoint) GetDatapointid() string {
	if x != nil {
		return x.Datapointid
	}
	return ""
}

func (x *Datapoint) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type DataRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp int64        `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Values    []*Datapoint `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *DataRecord) Reset() {
	*x = DataRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataframebatch_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataRecord) ProtoMessage() {}

func (x *DataRecord) ProtoReflect() protoreflect.Message {
	mi := &file_dataframebatch_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataRecord.ProtoReflect.Descriptor instead.
func (*DataRecord) Descriptor() ([]byte, []int) {
	return file_dataframebatch_proto_rawDescGZIP(), []int{1}
}

func (x *DataRecord) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DataRecord) GetValues() []*Datapoint {
	if x != nil {
		return x.Values
	}
	return nil
}

type SeriesPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp int64   `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Value     float32 `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SeriesPoint) Reset() {
	*x = SeriesPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataframebatch_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeriesPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeriesPoint) ProtoMessage() {}

func (x *SeriesPoint) ProtoReflect() protoreflect.Message {
	mi := &file_dataframebatch_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeriesPoint.ProtoReflect.Descriptor instead.
func (*SeriesPoint) Descriptor() ([]byte, []int) {
	return file_dataframebatch_proto_rawDescGZIP(), []int{2}
}

func (x *SeriesPoint) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SeriesPoint) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type DataSeries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datapointid string         `protobuf:"bytes,1,opt,name=datapointid,proto3" json:"datapointid,omitempty"`
	Values      []*SeriesPoint `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *DataSeries) Reset() {
	*x = DataSeries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataframebatch_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSeries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSeries) ProtoMessage() {}

func (x *DataSeries) ProtoReflect() protoreflect.Message {
	mi := &file_dataframebatch_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSeries.ProtoReflect.Descriptor instead.
func (*DataSeries) Descriptor() ([]byte, []int) {
	return file_dataframebatch_proto_rawDescGZIP(), []int{3}
}

func (x *DataSeries) GetDatapointid() string {
	if x != nil {
		return x.Datapointid
	}
	return ""
}

func (x *DataSeries) GetValues() []*SeriesPoint {
	if x != nil {
		return x.Values
	}
	return nil
}

type Dataframe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sourceid    string        `protobuf:"bytes,1,opt,name=sourceid,proto3" json:"sourceid,omitempty"`
	Dataframeid string        `protobuf:"bytes,2,opt,name=dataframeid,proto3" json:"dataframeid,omitempty"`
	Records     []*DataRecord `protobuf:"bytes,3,rep,name=records,proto3" json:"records,omitempty"`
	Nseries     []*DataSeries `protobuf:"bytes,4,rep,name=nseries,proto3" json:"nseries,omitempty"`
}

func (x *Dataframe) Reset() {
	*x = Dataframe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataframebatch_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dataframe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dataframe) ProtoMessage() {}

func (x *Dataframe) ProtoReflect() protoreflect.Message {
	mi := &file_dataframebatch_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dataframe.ProtoReflect.Descriptor instead.
func (*Dataframe) Descriptor() ([]byte, []int) {
	return file_dataframebatch_proto_rawDescGZIP(), []int{4}
}

func (x *Dataframe) GetSourceid() string {
	if x != nil {
		return x.Sourceid
	}
	return ""
}

func (x *Dataframe) GetDataframeid() string {
	if x != nil {
		return x.Dataframeid
	}
	return ""
}

func (x *Dataframe) GetRecords() []*DataRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *Dataframe) GetNseries() []*DataSeries {
	if x != nil {
		return x.Nseries
	}
	return nil
}

type Batches struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Batchesid string       `protobuf:"bytes,1,opt,name=batchesid,proto3" json:"batchesid,omitempty"`
	Content   []*Dataframe `protobuf:"bytes,2,rep,name=content,proto3" json:"content,omitempty"`
}

func (x *Batches) Reset() {
	*x = Batches{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataframebatch_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Batches) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Batches) ProtoMessage() {}

func (x *Batches) ProtoReflect() protoreflect.Message {
	mi := &file_dataframebatch_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Batches.ProtoReflect.Descriptor instead.
func (*Batches) Descriptor() ([]byte, []int) {
	return file_dataframebatch_proto_rawDescGZIP(), []int{5}
}

func (x *Batches) GetBatchesid() string {
	if x != nil {
		return x.Batchesid
	}
	return ""
}

func (x *Batches) GetContent() []*Dataframe {
	if x != nil {
		return x.Content
	}
	return nil
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataframebatch_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_dataframebatch_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_dataframebatch_proto_rawDescGZIP(), []int{6}
}

func (x *Response) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type DataframeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dataframeid string    `protobuf:"bytes,1,opt,name=dataframeid,proto3" json:"dataframeid,omitempty"`
	Response    *Response `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *DataframeResponse) Reset() {
	*x = DataframeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataframebatch_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataframeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataframeResponse) ProtoMessage() {}

func (x *DataframeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataframebatch_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataframeResponse.ProtoReflect.Descriptor instead.
func (*DataframeResponse) Descriptor() ([]byte, []int) {
	return file_dataframebatch_proto_rawDescGZIP(), []int{7}
}

func (x *DataframeResponse) GetDataframeid() string {
	if x != nil {
		return x.Dataframeid
	}
	return ""
}

func (x *DataframeResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

var File_dataframebatch_proto protoreflect.FileDescriptor

var file_dataframebatch_proto_rawDesc = []byte{
	0x0a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x43, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4e, 0x0a, 0x0a, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x41, 0x0a, 0x0b, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x54,
	0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x24,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x69, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x69, 0x64,
	0x12, 0x25, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x07, 0x6e, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x07, 0x6e, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0x4d,
	0x0a, 0x07, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x1c, 0x0a,
	0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x5c, 0x0a, 0x11, 0x44,
	0x61, 0x74, 0x61, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x69, 0x64, 0x12, 0x25, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xa5, 0x01, 0x0a, 0x0e, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x0d,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x0b, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x09, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x0b, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x09, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x36, 0x0a, 0x10, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x0a, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x1a, 0x12, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30,
	0x01, 0x42, 0x13, 0x5a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dataframebatch_proto_rawDescOnce sync.Once
	file_dataframebatch_proto_rawDescData = file_dataframebatch_proto_rawDesc
)

func file_dataframebatch_proto_rawDescGZIP() []byte {
	file_dataframebatch_proto_rawDescOnce.Do(func() {
		file_dataframebatch_proto_rawDescData = protoimpl.X.CompressGZIP(file_dataframebatch_proto_rawDescData)
	})
	return file_dataframebatch_proto_rawDescData
}

var file_dataframebatch_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_dataframebatch_proto_goTypes = []interface{}{
	(*Datapoint)(nil),         // 0: Datapoint
	(*DataRecord)(nil),        // 1: DataRecord
	(*SeriesPoint)(nil),       // 2: SeriesPoint
	(*DataSeries)(nil),        // 3: DataSeries
	(*Dataframe)(nil),         // 4: Dataframe
	(*Batches)(nil),           // 5: Batches
	(*Response)(nil),          // 6: Response
	(*DataframeResponse)(nil), // 7: DataframeResponse
}
var file_dataframebatch_proto_depIdxs = []int32{
	0, // 0: DataRecord.values:type_name -> Datapoint
	2, // 1: DataSeries.values:type_name -> SeriesPoint
	1, // 2: Dataframe.records:type_name -> DataRecord
	3, // 3: Dataframe.nseries:type_name -> DataSeries
	4, // 4: Batches.content:type_name -> Dataframe
	6, // 5: DataframeResponse.response:type_name -> Response
	1, // 6: TimeSeriesData.StreamRecords:input_type -> DataRecord
	3, // 7: TimeSeriesData.StreamDataSeries:input_type -> DataSeries
	4, // 8: TimeSeriesData.StreamDataframes:input_type -> Dataframe
	6, // 9: TimeSeriesData.StreamRecords:output_type -> Response
	6, // 10: TimeSeriesData.StreamDataSeries:output_type -> Response
	7, // 11: TimeSeriesData.StreamDataframes:output_type -> DataframeResponse
	9, // [9:12] is the sub-list for method output_type
	6, // [6:9] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_dataframebatch_proto_init() }
func file_dataframebatch_proto_init() {
	if File_dataframebatch_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dataframebatch_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Datapoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataframebatch_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataframebatch_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeriesPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataframebatch_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSeries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataframebatch_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dataframe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataframebatch_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Batches); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataframebatch_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataframebatch_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataframeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dataframebatch_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dataframebatch_proto_goTypes,
		DependencyIndexes: file_dataframebatch_proto_depIdxs,
		MessageInfos:      file_dataframebatch_proto_msgTypes,
	}.Build()
	File_dataframebatch_proto = out.File
	file_dataframebatch_proto_rawDesc = nil
	file_dataframebatch_proto_goTypes = nil
	file_dataframebatch_proto_depIdxs = nil
}
